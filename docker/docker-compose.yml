services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  app-mysql:
    image: mysql:8.0.33
    container_name: app_mysql
    ports:
      - "3307:3306"  # 호스트 3307 -> 컨테이너 3306 매핑
    environment:
      MYSQL_ROOT_PASSWORD: app_root_password  # MySQL 루트 패스워드 설정
      MYSQL_DATABASE: app_db  # 초기 생성할 데이터베이스 이름
      MYSQL_USER: app_user  # 애플리케이션 사용자 이름
      MYSQL_PASSWORD: app_password  # 애플리케이션 사용자 패스워드
    volumes:
      - app_mysql_data:/var/lib/mysql  # 데이터 영구 저장
    networks:
      - app-network  # 네트워크 연결

  test-mysql:
    image: mysql:8.0.33
    container_name: test_mysql
    ports:
      - "3308:3306"  # 호스트 3308 -> 컨테이너 3306 매핑
    environment:
      MYSQL_ROOT_PASSWORD: test_root_password
      MYSQL_DATABASE: test_db
      MYSQL_USER: test_user
      MYSQL_PASSWORD: test_password
    volumes:
      - test_mysql_data:/var/lib/mysql
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - app-network

  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      INFLUXDB_DB: k6
      INFLUXDB_HTTP_AUTH_ENABLED: false
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - influxdb
      - prometheus  # Prometheus가 먼저 실행되도록 설정
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    networks:
      - app-network

  k6:
    image: grafana/k6:latest
    container_name: k6
    ports:
      - "6565:6565"
    environment:
      - K6_OUT=influxdb=http://influxdb:8086/k6
    volumes:
      - ./scripts:/scripts  # 스크립트 공유
    networks:
      - app-network
    depends_on:
      - influxdb
    command: run /scripts/token-stress-test.js  # 스크립트 경로 지정


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"  # Prometheus 기본 웹 UI 포트
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Prometheus 설정 파일
    networks:
      - app-network

  concert:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: concert
    ports:
      - "8080:8080"
    environment:
      TZ: Asia/Seoul
      SPRING_DATASOURCE_URL: jdbc:mysql://app_mysql:3306/app_db
      SPRING_DATASOURCE_USERNAME: app_user
      SPRING_DATASOURCE_PASSWORD: app_password
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    platform: linux/amd64
    depends_on:
      - app-mysql
      - kafka
      - redis
    deploy:
      resources:
        limits:
          cpus: '6'    # 최대 6개의 CPU 사용
          memory: 8GB   # 최대 8GB 메모리 사용
        reservations:
          cpus: '2'    # 최소 2개의 CPU 보장
          memory: 4GB   # 최소 4GB 메모리 보장
    networks:
      - app-network

networks:
  app-network:
    driver: bridge  # 기본 브리지 네트워크
  k6:
    driver: bridge  # K6 전용 네트워크
  monitoring:
    driver: bridge

volumes:
  app_mysql_data:
  test_mysql_data: