spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:mysql://host.docker.internal:3307/app_db  # MySQL 컨테이너 이름(app-mysql)과 포트(3306), DB 이름(app_db)를 사용
    username: app_user  # 도커 설정에서 정의한 사용자명
    password: app_password  # 도커 설정에서 정의한 사용자 비밀번호
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20               # 풀 크기를 20으로 설정
      minimum-idle: 10                    # 최소 유휴 커넥션 수
      connection-timeout: 30000           # 커넥션 타임아웃 시간을 30초로 설정
      idle-timeout: 600000                # 유휴 커넥션 타임아웃 시간을 10분으로 설정
      max-lifetime: 1800000               # 커넥션 최대 수명을 30분으로 설정

  data:
    redis:
      host: host.docker.internal
      port: 6379

  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.MySQL8Dialect
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
        dialects: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
    database: mysql
    generate-ddl: true
    open-in-view: false
    show-sql: true
    defer-datasource-initialization: true # 데이터 베이스 초기화 시점을 지연

  sql:
    init:
      mode: always
      continue-on-error: true
      data-locations: classpath:sql/data.sql


  # Kafka 설정 추가
  kafka:
    bootstrap-servers: host.docker.internal:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonDeserializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
      auto-offset-reset: earliest # 초기 오프셋 설정
      enable-auto-commit: true    # 자동 커밋 활성화
      max-poll-records: 10        # 한 번에 가져올 최대 메시지 수
    template:
      default-topic: error-messages

logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.type: trace
    org.springframework.jdbc.core.JdbcTemplate: DEBUG
    org.springframework.jdbc.core.StatementCreatorUtils: TRACE
    org:
      apache:
        kafka: WARN       # Kafka 관련 로그 레벨을 INFO로 설정
      kafka:
        consumer: ERROR     # Kafka Consumer 로그 레벨을 ERROR로 설정
        producer: ERROR     # Kafka Producer 로그 레벨을 ERROR로 설정
        server: ERROR

  management:
    # Actuator Port
    server:
      port: 9200

    # endpoint 활성화/비활성화
    endpoint:
      health:
        enabled: false

    # endpoint 노출
    endpoints:
      web:
        exposure:
          include: "*"
          exclude: "env,beans,info,configprops"

  # tomcat 관련 지표 활성화
  server:
    tomcat:
      mbeanregistry:
        enabled: true